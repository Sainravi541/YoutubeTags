Uploading to PyPI
We did TestPyPI. What about the real python package index? I'm not going to upload the package everytime we push master, since there could be some changes not ready for production. Instead, I'm going to use the releases feature of Github.

Create a new action by clicking New workflow in the Actions tab and following the same steps as before. This time, I'm naming my action upload-to-pip.yml


name: Upload to PIP

# Controls when the action will run. 
on:
  # Triggers the workflow when a release is created
  release: 
    types: [created]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "upload"
  upload:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Sets up python
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Install dependencies
      - name: "Installs dependencies"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install setuptools wheel twine

      # Build and upload to PyPI
      - name: "Builds and uploads to PyPI"
        run: |
          python3 setup.py sdist bdist_wheel
          python3 -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_TOKEN }}
Adding another secret
Let's add another secret, this time called TWINE_TOKEN, and give it the value of your PyPI API token.

Testing our Action
Let's create a new release by going to the releases section (to do that, click New Release on the right side of the main code tab).

Alt Text

I suggest naming the tag with the version in setup.py prefixed with v.

And our project has successfully been uploaded to PyPI!

Congratulations ü•≥! You just learnt the basics of Github Actions, PyPI projects and DevOps! Give yourself a pat on your back!

Stuck?
Github repo
PyPI
Github Actions Quickstart
Uploading a package on PyPI

If you enjoyed this post, and would like to see more, let me know in the comments, and also, follow me for more content like this üòÄ

Using github actions to create, test and publish a python package (2 Part Series)
1
Create a PyPI (pip) package, test it and publish it using Github Actions (PART 1)
2
Create a PyPI (pip) package, test it and publish it using Github Actions (PART 2)
Discussion (2)
Subscribe
pic
Add to the discussion
 
hentaichan profile image
„Éò„É≥„Çø„Ç§„Å°„ÇÉ„Çì
‚Ä¢
Jan 15

I would love to have read this six month ago, took me like a solid week to figure everything out. Great writeup!


2
 
arnu515 profile image
arnu515
‚Ä¢
Jan 16

Thank you!


2
Code of Conduct ‚Ä¢ Report abuse
Read next
ku6ryo profile image
How to set env parameters conditionally in GitHub Actions‚öô
Ryo Kuroyanagi - Aug 13

billyndirangu profile image
Developing for the web with Flask; creating a web application.
Billy - Sep 1

maxwizardth profile image
Data type in python
oladejo abdullahi - Sep 2

abdenasser profile image
My personal django rest framework serializer notes
Nasser El Idrissi - Sep 2


arnu515
Follow
JOINED
Jun 10, 2020
More from arnu515
Automate your workflow with Microsoft Power Automate
#devops #azure #automation #tutorial
Everything new in Flask 2.0
#python #flask #webdev #changelog
Create a PyPI (pip) package, test it and publish it using Github Actions (PART 1)
#python #devops #github #pip
# This is a basic workflow to help you get started with Actions

name: Upload to PIP

# Controls when the action will run. 
on:
  # Triggers the workflow when a release is created
  release: 
    types: [created]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "upload"
  upload:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Sets up python
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Install dependencies
      - name: "Installs dependencies"
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install setuptools wheel twine

      # Build and upload to PyPI
      - name: "Builds and uploads to PyPI"
        run: |
          python3 setup.py sdist bdist_wheel
          python3 -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_TOKEN }}
